|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||------------------------------------------------------------------------ APIREST EN NODEJS -------------------------------------------------------------------------|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||                                                                                                                                                                    |||
||| --  01. ENTORNO DE DESARROLLO                                                                                                                                      |||
||| --  02. ESTRUCTURA DEL PROYECTO                                                                                                                                    |||
||| --  03. BASE DE DATOS                                                                                                                                              |||
||| --  04. CÓDIGO DEL PROYECTO                                                                                                                                        |||
||| --  05. PRUEBAS DE LA API CON POSTMAN                                                                                                                              |||
|||                                                                                                                                                                    |||
||| --  ANEXOS: TENER EN CUENTA                                                                                                                                        |||
||| --          AX_01.  Subir el Proyecto a Github                                                                                                                     |||
||| --          AX_02.  Clonar un proyecto de Github                                                                                                                   |||
||| --          AX_03.  Cambiar los puertos de 'Apache' en 'XAMPP'                                                                                                     |||
||| --          AX_04.  Cambiar los puertos de 'MySQL' en 'XAMPP'                                                                                                      |||
||| --          AX_05.  Puesta en Marcha del Proyecto                                                                                                                  |||
|||                                                                                                                                                                    |||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||                                                                                                                                                                    |||
||| --  01. ENTORNO DE DESARROLLO                                                                                                                                      |||
||| --      01.01.  Instalar Visual Studio Code                                                                                                                        |||
||| --      01.02.  Instalar Node Js                                                                                                                                   |||
||| --      01.03.  Modificar Directivas en PowerShell                                                                                                                 |||
||| --      01.04.  Instalar Git                                                                                                                                       |||
||| --      01.05.  Crear cuenta en 'Github'                                                                                                                           |||
||| --      01.06.  Instalar XAMPP                                                                                                                                     |||
||| --      01.07.  Instalar Postman                                                                                                                                   |||
||| --  02. ESTRUCTURA DEL PROYECTO                                                                                                                                    |||
||| --      02.01.  Crear la carpeta raíz del proeycto                                                                                                                 |||
||| --      02.02.  Crear el archivo para manejar las dependencias 'package.json'                                                                                      |||
||| --      02.03.  Instalar dependencias en el 'backend/'                                                                                                             |||
||| --      02.04.  Crear la estructura de carpetas y los archivos del proyecto                                                                                        |||
||| --  03. BASE DE DATOS                                                                                                                                              |||
||| --      03.01.  Codificar la base de datos 'database/db_node.sql'                                                                                                  |||
||| --      03.02.  Ejecutar la base de datos 'database/db_node.sql'                                                                                                   |||
||| --  04. CÓDIGO DEL PROYECTO                                                                                                                                        |||
||| --      04.01.  Codificar los valores de la cadena de conexión a la base de datos en 'backend/.env'                                                                |||
||| --      04.02.  Codificar la cadena de conexión en 'backend/config/config.js'                                                                                      |||
||| --      04.03.  Codificar el modelo usuarios en 'backend/models/user.js'                                                                                           |||
||| --      04.04.  Codificar la key en 'backend/config/keys.js'                                                                                                       |||
||| --      04.05.  Codificar el Jason Web Token con la key en 'backend/config/passport.js'                                                                            |||
||| --      04.06.  Codificar la API de usuarios en 'backend/controllers/userController.js'                                                                            |||
||| --      04.07.  Codificar la autenticación por JWT y Roles en 'backend/middlewares/authMiddleware.js'                                                              |||
||| --      04.08.  Codificar la ruta de usuario en 'backend/routes/userRoutes.js'                                                                                     |||
||| --      04.09.  Codificar el servidor en 'backend/server.js'                                                                                                       |||
||| --      04.10.  Codificar el inicio del backend en 'backend/index.js'                                                                                              |||
||| --      04.11.  Ejecutar el backend                                                                                                                                |||
||| --  05. PRUEBAS DE LA API CON POSTMAN                                                                                                                              |||
||| --      05.01.  Crear la Colección 'USUARIOS'                                                                                                                      |||
||| --      05.02.  Crear los métodos HTTP (GET, POST, PUT, DELETE) de la Colección 'USUARIOS'                                                                         |||
||| --      05.03.  Configurar 'GET raiz'                                                                                                                              |||
||| --      05.04.  Configurar 'POST userCreate'                                                                                                                       |||
||| --      05.05.  Configurar 'POST login'                                                                                                                            |||
||| --      05.06.  Configurar 'GET usersAll'                                                                                                                          |||
||| --      05.07.  Configurar 'GET userById'                                                                                                                          |||
||| --      05.08.  Configurar 'POST userUpdate'                                                                                                                       |||
||| --      05.09.  Configurar 'DELETE userDelete'                                                                                                                     |||
|||                                                                                                                                                                    |||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||



|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||-------------------------------------------------------------------- 01. ENTORNO DE DESARROLLO ---------------------------------------------------------------------|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.01.  Instalar Visual Studio Code: --------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'Visual Studio Code': https://code.visualstudio.com/download.

            02. Instalar Visual Studio Code.

                    ⦿  En el asistente de instalación dejar marcado:   ☑ 'Agregar PATH…'.                    

            03. Abrir Visual Studio Code.

            04. Instalar las siguientes extensiones en Visual Studio Code:

                    ⦿  Material Icon Theme                    
                    ⦿  Live Server  

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.02.  Instalar Node Js: -------------------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'node.js': https://nodejs.org/es/.

            02. Instalar node.js.


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.03.  Modificar Directivas en PowerShell: -------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Abrir el PowerShell de Windows
            
            02. Ejecutar el siguiente comando

                    ⦿  PS C:\..\..> Get-ExecutionPolicy
                    ⦿  Restricted

            03. Si aparece 'Restricted', hay que cambiarla a 'Unrestricted' de la siguiente forma:

                    ⦿  PS C:\..\..> Set-ExecutionPolicy -Scope CurrentUser

                        cmdlet Set-ExecutionPolicy en la posición 1 de la canalización de comandos
                        Proporcione valores para los parámetros siguientes:
                        ExecutionPolicy: Unrestricted

            04. Verificar la versión de 'node' y 'npm':

                    ⦿  PS C:\..\..> node --version
                    ⦿  PS C:\..\..> npm --version

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.04.  Instalar Git: -----------------------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'Git': https://git-scm.com/downloads.

            02. Instalar Git.

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.05.  Crear cuenta en 'Github': -----------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Crear cuenta en 'Github': https://github.com/signup?source=login.

            02. Seguir los pasos de creación de la cuenta.


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.06.  Instalar XAMPP: ---------------------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'XAMPP': https://www.apachefriends.org/es/download.html.

            02. Instalar XAMPP.

            03. Abrir el 'XAMPP Control Panel' y ejecutar los servicios de 'Apache' y 'MySQL'.

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  NOTA:   
                    
                    ⦿  Verificar que los puertos sean: En Apache (:80) y de MySQL (:3306).
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.07.  Instalar Postman: -------------------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'Postman': https://www.postman.com/downloads/. Este programa nos sirve para realizar probar las peticiones HTTP.

            02. Instalar Postman.
            
            03. Abrir Postman.


|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||------------------------------------------------------------------- 02. ESTRUCTURA DEL PROYECTO --------------------------------------------------------------------|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 02.01.  Crear la carpeta raíz del proeycto: -------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. En cualquier parte del computador (Se sugiere en el Escritorio de Windows), crear la carpeta 'proyecto'
            
            02. En el interior de la carpeta 'proyecto', crear dos más 'backend' y 'database'
            
            03. Abrir la carpeta 'proyecto' con 'Visual Studio Code'

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 02.02.  Crear el archivo para manejar las dependencias 'package.json': ----------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Abrir una terminal en Visual Studio Code ('Terminal / New Terminal' ó 'Ctrl + Shift + ñ')

            02. Cambiar el nombre de la terminal a 'backend', seleccionándola en la parte inferior derecha y presionando F2 / Rename...
            
            03. Cambiar el color de la terminal 'backend', dando click derecho / Chage Color... / Seleccionar el color
            
            04. En la Terminal de 'Visual Studio Code' digitar lo siguiente:

                    ⦿  PS C:\..\..> cd backend
                    ⦿  PS C:\..\backend> npm init

                        This utility will walk you through creating a package.json file.
                        It only covers the most common items, and tries to guess sensible defaults.

                        See `npm help init` for definitive documentation on these fields
                        and exactly what they do.

                        Use `npm install <pkg>` afterwards to install a package and
                        save it as a dependency in the package.json file.

                        Press ^C at any time to quit.
                        package name: (backend) mi-api-node
                        version: (1.0.0)
                        description: API en Node.js con Express y JWT
                        entry point: (index.js)
                        test command:
                        git repository:
                        keywords: NodeJs
                        author: Albeiro Ramos
                        license: (ISC) MIT
                        About to write to C:\Users\Instructor\Documents\_albe_\react_native\backend\package.json:

                        {
                          "name": "mi-api-node",
                          "version": "1.0.0",
                          "description": "API en Node.js con Express y JWT",
                          "main": "index.js",
                          "scripts": {
                            "test": "echo \"Error: no test specified\" && exit 1"
                          },
                          "keywords": [
                            "NodeJs"
                          ],
                          "author": "Instructor Albeiro Ramos",
                          "license": "MIT"
                        }

                        Is this OK? (yes) yes

            05. Modificar el archivo 'package.json' en la línea 8, quedando así:
            
                      1    {
                      2      "name": "mi-api-node",
                      3      "version": "1.0.0",
                      4      "description": "API en Node.js con Express y JWT",
                      5      "main": "index.js",
                      6      "scripts": {
                      7        "test": "echo \"Error: no test specified\" && exit 1",
                      8        "start": "node index.js"
                      9      },
                     10      "keywords": [
                     11        "NodeJs"
                     12      ],
                     13      "author": "Albeiro Ramos",
                     14      "license": "MIT"
                     15    }

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 02.03.  Instalar dependencias en el 'backend/': ---------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                    ⦿  PS C:\..\backend> npm i bcryptjs@3.0.2
                    ⦿  PS C:\..\backend> npm i cors@2.8.5
                    ⦿  PS C:\..\backend> npm i dotenv
                    ⦿  PS C:\..\backend> npm i express@4.21.2
                    ⦿  PS C:\..\backend> npm i http@0.0.1-security
                    ⦿  PS C:\..\backend> npm i jsonwebtoken@9.0.2
                    ⦿  PS C:\..\backend> npm i morgan@1.10.0
                    ⦿  PS C:\..\backend> npm i mysql@2.18.1
                    ⦿  PS C:\..\backend> npm i passport@0.4.1
                    ⦿  PS C:\..\backend> npm i passport-jwt@4.0.1
                    ⦿  PS C:\..\backend> npm audit fix
                    ⦿  PS C:\..\backend> npm audit fix --force

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 02.04.  Crear la estructura de carpetas y los archivos del proyecto: ------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|                                                                                                                                                      
                                                                                                                                                      
                                                                                                                                                      # C = Carpetas
                                                                                                                                                      # A = Archivos

                        proyecto/                                             # C. Backend y Frontend de un proyecto software (web o móvil).
                        ├── backend/                                          # C. Lógica del servidor Node.js para la gestión de datos y API.
                        │   ├── config/                                       # C. Configuración del backend (base de datos, claves, autenticación).
                        │   │   ├── config.js                                 # A. Configuración principal del backend (variables de entorno, BD, etc.).
                        │   │   ├── keys.js                                   # A. Claves secretas para seguridad (JWT, OAuth, servicios externos).
                        │   │   └── passport.js                               # A. Configuración de la estrategia de autenticación con Passport.js.
                        │   ├── controllers/                                  # C. Manejan la lógica de negocio y conexión entre rutas y modelos.
                        │   │   └── userController.js                         # A. Controlador para las operaciones relacionadas con los usuarios (CRUD, login).
                        │   ├── middlewares/                                  # C. Funciones que interceptan las peticiones HTTP (autenticación, validaciones).
                        │   │   └── authMiddleware.js                         # A. Middleware para verificar autenticación/autorización de usuarios.
                        │   ├── models/                                       # C. Definición de modelos de datos que representan tablas en la base de datos.
                        │   │   └── user.js                                   # A. Esquema del modelo de usuario (campos, validaciones, consultas SQL).
            (NO CREAR)  │   ├── node_modules/                                 # C. Dependencias externas instaladas vía NPM.
                        │   ├── routes/                                       # C. Define las rutas de la API que conectan con los controladores.
                        │   │   └── userRoutes.js                             # A. Endpoints relacionados con usuarios (registro, login, CRUD).
                        │   ├── .env                                          # A. Cadena de conexión a la base de datos.
                        │   ├── index.js                                      # A. Punto principal de entrada del backend. Carga 'server.js' y arranca la app.
            (NO CREAR)  │   ├── package-lock.json                             # A. Versiones exactas de las dependencias instaladas.
            (NO CREAR)  │   ├── package.json                                  # A. Manifest del backend (nombre del proyecto, scripts, dependencias).
                        │   └── server.js                                     # A. Configuración del servidor Express (middlewares, rutas, DB, etc.).
                        └── database/                                         # C. Archivos relacionados con la base de datos.
                            └── db_node.sql                                   # A. Script SQL para crear y poblar la base de datos del proyecto.

                                                                              ⦿ También se usa CommonJs como sistema de modulos que usa require();

|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||------------------------------------------------------------------------ 03. BASE DE DATOS -------------------------------------------------------------------------|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 03.01. Codificar la base de datos 'database/db_node.sql': -----------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1    DROP DATABASE IF EXISTS db_node;
                      2
                      3    CREATE SCHEMA db_node DEFAULT CHARACTER SET utf8 ;
                      4    USE db_node;
                      5
                      6    CREATE TABLE users (
                      7      id INT AUTO_INCREMENT PRIMARY KEY,
                      8      name VARCHAR(100) NOT NULL,
                      9      lastname VARCHAR(100) NOT NULL,
                     10      email VARCHAR(150) NOT NULL UNIQUE,
                     11      password VARCHAR(255) NOT NULL,
                     12      phone VARCHAR(20),
                     13      image VARCHAR(255),
                     14      role VARCHAR(20),
                     15      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                     16      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
                     17    ) ENGINE=InnoDB;
                     18
                     19    INSERT INTO users VALUES (
                     20      null,
                     21      "Albeiro",
                     22      "Ramos",
                     23      "profealbeiro2020@gmail.com",
                     24      "$2b$10$NR8eRuuAB12JoHe81ZYnG.i2/5k/D5TKrxc7Pk74W4rgzADdABM9G",
                     25      "3103103101",
                     26      "profile",
                     27      "admin",
                     28      null,
                     29      null
                     30    );

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  Primero lo que hacemos es borrar la base de datos llamada 'db_node' solamente si esta existe anteriormente
                    despues creamos esta base de datos y ademas la usamos, despues creamos una tabla llamada usuarios con varias columnas
                    relacionadas a datos que se piden comunmente a un usuario, despues insertamos datos a esta tabla en su respectiva columna.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    1. Aqui eliminamos la base de datos con nombre db_node solamnete si existe anteriormente
                    2. En esta linea creamos un esquema o base de datos y le damos una regla de caracteres "utf8".
                    3. Aqui usamos o la base de datos que acabamos de crear
                    4. CREATE TABLE users (
                            id INT AUTO_INCREMENT PRIMARY KEY,
                            name VARCHAR(100) NOT NULL,
                            lastname VARCHAR(100) NOT NULL,
                            email VARCHAR(150) NOT NULL UNIQUE,
                            password VARCHAR(255) NOT NULL,
                            phone VARCHAR(20),
                            image VARCHAR(255),
                            role VARCHAR(20),
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
                         ) ENGINE=InnoDB;
                    
                    Aqui creamos una nueva tabla en nuestra base de datos node_db a la cúal le ponemos el nombre de users "usuarios"
                    dentro de esta también crearemos las columnas correspondientes a esta tabla, columnas tales como, id, nombre, apellido
                    correo, contraseña, telefono, imagen, rol, fecha de creacion y fecha de autorización

                    5. INSERT INTO users VALUES (
                            null,
                            "Albeiro",
                            "Ramos",
                            "profealbeiro2020@gmail.com",
                            "$2b$10$NR8eRuuAB12JoHe81ZYnG.i2/5k/D5TKrxc7Pk74W4rgzADdABM9G",
                            "3103103101",
                            "profile",
                            "admin",
                            null,
                            null
                         );

                    Aqui insertamos una fila de datos dentro de la tabla usuarios, con su respectivo orden de columnas.

                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 03.02. Ejecutar la base de datos 'database/db_node.sql': ------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Abrir el navegador y escribir http://localhost/phpmyadmin/
            
            02. Dar click en 'Importar'
            
            03. Dar click en 'Seleccionar archivo'
            
            04. Seleccionar el archivo 'C:\..\..\proyecto\database\db_node.sql'
            
            05. Dar click en 'Importar'



|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||--------------------------------------------------------------------- 04. CÓDIGO DEL PROYECTO ----------------------------------------------------------------------|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.01.  Codificar los valores de la cadena de conexión a la base de datos en 'backend/.env': ------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     DB_HOST=localhost
                      2     DB_USER=root
                      3     DB_PASSWORD=
                      4     DB_NAME=db_node
                      5     DB_PORT=3306
                      6
                      7     JWT_SECRET=e9f94f8d3a1e6d7c2b3f9e5a7c8d4f2b7a0e1d3c4f5b6a7e9f8d0c3b4a6d2e1

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  Aqui establecemos las variables de entorno que son privadas y ademas no se suben al repositorio,
                    aqui tenemos lo que vendria siendo lo necesario para poder conectarse con la base de datos,
                    el host, el usuario, la contraseña, el nombre de la base de datos y el puerto que esta usa 
                    además guardamos la firma que damos al jwt para autorizar cualquier acción.

                    1. DB_HOST para el host que usa la base de datos
                    2. DB_USER para el usuario que vamos a usar para conectarnos a la base de datos
                    3. DB_PASSWORD para la contraseña de la base de DATOS
                    4. DB_NAME para el nombre de la base de datos.
                    5. DB_PORT para el puerto en el que nuestra base de datos puede ser encontrada

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.02.  Codificar la cadena de conexión en 'backend/config/config.js': ----------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     require('dotenv').config();
                      2     const mysql = require('mysql');
                      3     const db = mysql.createConnection({
                      4         host: process.env.DB_HOST,
                      5         user: process.env.DB_USER,
                      6         password: process.env.DB_PASSWORD,
                      7         database: process.env.DB_NAME,
                      8         port: process.env.DB_PORT
                      9     });
                     10     db.connect(function(err) {
                     11         if (err) throw err;
                     12         console.log('Base de datos conectada')
                     13     });
                     14     module.exports = db;

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  aqui usamos las variables de entorno que declaramos antes, las usamos para conectar o configurar la conexion a la base de datos,
                    al inicio importamos la libreria dotenv y también la libreria de mysql despues comenzamos a crear la conexion con
                    mysql.createConnection y dentro le damos el contexto o las variables de entorno que va a usar, acto seguido declaramos que si la 
                    conexion no se hace nos devuelva un error, si no da un mensaje en la consolo declarando que la conexion fue exitosa y ademas Exportamos
                    toda la conexion.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    1. Importamos la funcion config de la libreria dotenv.
                    2. Importamos la libreria mysql
                    3. const db = mysql.createConnection({
                            host: process.env.DB_HOST,
                            user: process.env.DB_USER,
                            password: process.env.DB_PASSWORD,
                            database: process.env.DB_NAME,
                            port: process.env.DB_PORT
                        });
                    Aqui creamos nuestra conexión a nuestra base de datos haciendo uso de las variables de entorno que hemos declarado antes en el .env
                    usamos una funcion de la libreria mysql llamada createConnection a la cúal le pasamos un objeto con cada valor que necesita usando claves y valores
                    4.  db.connect(function(err) {
                            if (err) throw err;
                            console.log('Base de datos conectada')
                        });
                    Aqui utilizamos toda la conexion que hicimos y utlizamos una funcion de la libreria llamada connect para Comprobar
                    si establecio la conexion con la base de datos y establecemos que si existe un error nos envie el error y
                    si la conexion pudo ser establecida nos indica mediante la consola que se pudo conectar
                    5. module.exports = db;
                    Aqui exportamos nuestra conexión con la base de datos para poder ser usada en cualquier lugar
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.03.  Codificar el modelo usuarios en 'backend/models/user.js': ---------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     const db = require('../config/config');
                      2     const bcrypt = require('bcryptjs');
                      3     const User = {};
                      4
                      5     User.findAll = (result) => {
                      6         const sql = `SELECT id, email, name, lastname, phone, image, role, created_at, updated_at FROM users`;
                      7         db.query(sql, (err, users) => {
                      8             if (err) {
                      9                 console.log('Error al listar usuarios: ', err);
                     10                 result(err, null);
                     11             } else {
                     12                 console.log('Usuarios encontrados: ', users.length);
                     13                 result(null, users);
                     14             }
                     15         });
                     16     };
                     17
                     18     User.findById = (id, result) => {
                     19         const sql = `SELECT id, email, name, lastname, image, phone, role, password FROM users WHERE id = ?`;
                     20         db.query(sql, [id], (err, user) => {
                     21             if (err) {
                     22                 console.log('Error al consultar: ', err);
                     23                 result(err, null);
                     24             }
                     25             else {
                     26                 console.log('Usuario consultado: ',  user[0] );
                     27                 result(null, user[0]);
                     28             }
                     29         });
                     30     };
                     31
                     32     User.findByEmail = (email, result) => {
                     33         const sql = `SELECT id, email, name, lastname, image, phone, role, password FROM users WHERE email = ?`;
                     34         db.query(sql, [email], (err, user) => {
                     35             if (err) {
                     36                 console.log('Error al consultar: ', err);
                     37                 result(err, null);
                     38             }
                     39             else {
                     40                 console.log('Usuario consultado: ',  user[0] );
                     41                 result(null, user[0]);
                     42             }
                     43         });
                     44     };
                     45
                     46     User.create = async (user, result) => {
                     47         const hash = await bcrypt.hash(user.password, 10)  
                     48         const validRoles = ['admin', 'seller', 'customer', 'user'];
                     49         const role = validRoles.includes(user.role) ? user.role : 'user';
                     50         const sql = `INSERT INTO users(
                     51                         name, 
                     52                         lastname,
                     53                         email, 
                     54                         password,
                     55                         phone,
                     56                         image,
                     57                         role,
                     58                         created_at,
                     59                         updated_at
                     60                     ) VALUES (?,?,?,?,?,?,?,?,?)`;
                     61         db.query(sql,
                     62             [
                     63                 user.name,
                     64                 user.lastname,
                     65                 user.email,
                     66                 hash,
                     67                 user.phone,
                     68                 user.image,
                     69                 role,
                     70                 new Date(),
                     71                 new Date()
                     72             ], (err, res) => {
                     73                 if (err) {
                     74                     console.log('Error al crear al Usuario: ', err);
                     75                     result(err, null);
                     76                 } else {
                     77                     console.log('Usuario creado: ', {id: res.insertId, ...user});
                     78                     result(null, {id: res.insertId, ...user});
                     79                 }
                     80             }
                     81         );
                     82     };
                     83
                     84     User.update = async (user, result) => {
                     85         let fields = [];
                     86         let values = [];
                     87
                     88         if (user.password) {
                     89             const hash = await bcrypt.hash(user.password, 10);
                     90             fields.push("password = ?");
                     91             values.push(hash);
                     92         }
                     93
                     94         if (user.email) {
                     95             fields.push("email = ?");
                     96             values.push(user.email);
                     97         }
                     98         if (user.name) {
                     99             fields.push("name = ?");
                    100             values.push(user.name);
                    101         }
                    102         if (user.lastname) {
                    103             fields.push("lastname = ?");
                    104             values.push(user.lastname);
                    105         }
                    106         if (user.phone) {
                    107             fields.push("phone = ?");
                    108             values.push(user.phone);
                    109         }
                    110         if (user.image) {
                    111             fields.push("image = ?");
                    112             values.push(user.image);
                    113         }
                    114         if (user.role) {
                    115             fields.push("role = ?");
                    116             values.push(user.role);
                    117         }
                    118
                    119         fields.push("updated_at = ?");
                    120         values.push(new Date());
                    121
                    122         const sql = `UPDATE users SET ${fields.join(", ")} WHERE id = ?`;
                    123         values.push(user.id);
                    124
                    125         db.query(sql, values, (err, res) => {
                    126             if (err) {
                    127                 console.log('Error al actualizar usuario: ', err);
                    128                 result(err, null);
                    129             } else {
                    130                 console.log('Usuario actualizado: ', { id: user.id, ...user });
                    131                 result(null, { id: user.id, ...user });
                    132             }
                    133         });
                    134     };
                    135
                    136     User.delete = (id, result) => {
                    137         const sql = `DELETE FROM users WHERE id = ?`;
                    138         db.query(sql, [id], (err, res) => {
                    139             if (err) {
                    140                 console.log('Error al eliminar usuario: ', err);
                    141                 result(err, null);
                    142             } else {
                    143                 console.log('Usuario eliminado con id: ', id);
                    144                 result(null, res);
                    145             }
                    146         });
                    147     };
                    148
                    149     module.exports = User;

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  .

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    1. Aqui importamos la conexion a la base de datos del archivo config dentro de la carpeta config.
                    2. Aqui importamos la libreria de bcrypt
                    3. Aqui creamos un objeto llamado users


                    ⦿  User.findAll = (result) => {
                            const sql = `SELECT id, email, name, lastname, phone, image, role, created_at, updated_at FROM users`;
                            db.query(sql, (err, users) => {
                                if (err) {
                                    console.log('Error al listar usuarios: ', err);
                                    result(err, null);
                                } else {
                                    console.log('Usuarios encontrados: ', users.length);
                                    result(null, users);
                                }
                            });
                        };
                    5. Aqui creamos una nueva arrow function llamada findAll "Buscar Todos" que recibe como parametro result
                    6. Seguido dentro declaramos una nueva constante llamada sql que dentro almacena codigo sql,además almacena una petición a la
                    tabla usuarios de la cúal traemos todos sus datos
                    7. Aqui usamos una función llamada query la cúal tiene 3 parametros como sql la query declarada anteriormente, err "error y
                    users que seria el resultado de la petición.
                    8, 9. Aqui decimos que si existe un error o el parametro error tiene un valor truthy enviemos un mensaje a la consola donde digamos
                    "Error al listar usuarios" y además el error que hubo.
                    10. Y almacenamos en result el error y null
                    11, 12. Si no existe un error entonces enviamos un mensaje a la consola donde decimos "Usuarios encontrados" y tambien la longitud de objetos que me devolvio la query
                    para poder saber la cantidad de usuarios que retorno la query
                    13. y Almacenamos nuevamente null y el resultado dentro de result.


                    ⦿  User.findById = (id, result) => {
                            const sql = `SELECT id, email, name, lastname, image, phone, role, password FROM users WHERE id = ?`;
                            db.query(sql, [id], (err, user) => {
                                if (err) {
                                    console.log('Error al consultar: ', err);
                                    result(err, null);
                                }
                                else {
                                    console.log('Usuario consultado: ',  user[0] );
                                    result(null, user[0]);
                                }
                            });
                        };
                    18. Aqui creamos una nueva arrow function llamada findById "Buscar por Id" que recibe como parametro id y result.
                    19. Aqui declaramos una constante llamada sql donde almacenamos una query a la base de datos usando "?" como un placeholder o indice de donde almacenar el id
                    20. Aqui usamos la función query que recibe cmo parametro sql la petición, un array [id], error y user.
                    21, 22. Aqui decimos que si existe un error o el parametro error tiene un valor truthy enviemos un mensaje a la consola donde digamos
                    "Error al consultar" y además el error que hubo.
                    23. Aqui almacenamos el error y null dentro de result.
                    25, 26. Si no existe un error entonces enviamos un mensaje a la consola donde decimos "Usuarios consultado" y tambien el valor del primer elemento dentro del array user que me devolvio la query
                    27. Aqui almacenamos null y el primer valor de al array user.

                    ⦿  User.findByEmail = (email, result) => {
                            const sql = `SELECT id, email, name, lastname, image, phone, role, password FROM users WHERE email = ?`;
                            db.query(sql, [email], (err, user) => {
                                if (err) {
                                    console.log('Error al consultar: ', err);
                                    result(err, null);
                                }
                                else {
                                    console.log('Usuario consultado: ',  user[0] );
                                    result(null, user[0]);
                                }
                            });
                        };

                    32. Aqui creamos una nueva función llamada findByEmail "Buscar por correo electronico" que recibe como parametro email y result
                    33. Aqui declaramos una nueva constante llamada sql que almacena una petición a la base de datos nuevamente usando "?" como un placeholder
                    está petición trae id, email, name, lastname, image, phone, role, password del usuario con el id que le asignemos.
                    34. Aqui usamos la función que recibe como parametro la petición, el array [email], error y user.
                    35, 36. Aqui decimos que si existe un error o el parametro error tiene un valor truthy enviemos un mensaje a la consola donde digamos
                    "Error al consultar" y además el error que hubo.
                    37. Aqui almacenamos dentro de result el error y un valor nulo.
                    39, 40. Si no existe un error entonces enviamos un mensaje a la consola donde decimos "Usuarios consultado" y tambien el valor del primer 
                    elemento dentro del array user que vendria siendo un objeto que contiene toda la información del usuario.
                    41. Aqui almacenamos un valor nulo y el objeto que tiene la información de ese usuario.

                    ⦿  User.create = async (user, result) => {
                            const hash = await bcrypt.hash(user.password, 10)  
                            const validRoles = ['admin', 'seller', 'customer', 'user'];
                            const role = validRoles.includes(user.role) ? user.role : 'user';
                            const sql = `INSERT INTO users(
                                            name, 
                                            lastname,
                                            email, 
                                            password,
                                            phone,
                                            image,
                                            role,
                                            created_at,
                                            updated_at
                                        ) VALUES (?,?,?,?,?,?,?,?,?)`;
                            db.query(sql,
                                [
                                    user.name,
                                    user.lastname,
                                    user.email,
                                    hash,
                                    user.phone,
                                    user.image,
                                    role,
                                    new Date(),
                                    new Date()
                                ], (err, res) => {
                                    if (err) {
                                        console.log('Error al crear al Usuario: ', err);
                                        result(err, null);
                                    } else {
                                        console.log('Usuario creado: ', {id: res.insertId, ...user});
                                        result(null, {id: res.insertId, ...user});
                                    }
                                }
                            );
                        };
                    
                    46. Aqui creamos una nueva función llamada create "crear" declaramos que es asincrona usando async lo que significa que va a tomar un tiempo 
                    en completarse, dentro de esta podemos usar await para indicar que debe esperar a que cierta acción que le demos esté valor se complete además esta recibe como parametro user y result.
                    47. Aqui creamos una nueva constante llamada hash que indica que debemos esperar que se complete la acción que tiene dentro usando "await", además
                    llamamos la constante bcrypt y usamos su funcion "hash()" dentro de está le pasamos un parametro llamado user.password y el número de rondas de trabajo
                    o rondas de hash aplicadas para dificultar los ataques y etc.
                    48. Aqui creamos un array llamado ValidRoles o "Roles Validos" y dentro almacenamos cadenas de texto que contienen cada uno de los roles que manejamos en la base de datos.
                    49. Aqui creamos una nueva constante llamada role a la cúal le asignamos un valor que antes validamos si esta dentro del array de ValidRoles y si no esta dentro de ese array lo que es
                    usar un operador ternario para indicarle que el valor de role ser "user"
                    50, 51, 52, 53, 54, 55, 56, 57, 58,
                    59, 60. Aqui creamos una nueva constante donde nuevamente almacenamos una petición a la base de datos donde indicamos que vamos a insertar en la tabla usuarios en las diferentes columnas que tiene
                    y además le pasamos los valores dentro de "VALUES()" usando "?" como un placeholder o indice de donde va a poner cada dato que le pasemos.
                    61. Aqui usamos nuevamente la conexion a la base de datos que hicimos anteriormente y además una función llamada query a la cual le pasamos como parametros la petición que hemos creado antes
                    62, 63, 64, 65, 66, 67, 68, 69, 70, 71. Y también un array con los valores que va a insertar como nombre, apellido, correo, contraseña pero esta vez hasheada , telefono, imagen, rol y ahora le pasamos en los dos siguientes campos una función de js que se llama Date() 
                    la cúal lo que se hace es enviar la fecha actual osea el valor de esos campos seria algo parecido a esto "2025-10-22T18:08:05.145Z".
                    72. También le pasamos otro parametro (err = "error", null) => {} esto seria una funcion anonima osea que solo existe en este pedacito de codigo
                    73, 74. Aqui validamos si el valor de err es truthy, si este este es true o tiene alguna cadena o algo dentro nos devolvera un mensaje en la consola que dice "Error al crear al usuario" y el error
                    75. Aqui almacenamos dentro de result el error y null
                    76, 77. Aqui decimos que si no existe un error entonces enviamos un mensaje a la consola donde decimos "Usuarios Creado" y devolvemos el id que se le dio en la base de datos y toda la información que insertamos.
                    78. Aqui almacenamos un valor null y un objeto con el id del usuario que hemos insertado y todos los datos que almacena user usando un spread operator "..." que lo que hace es copiar todos los datos de un objeto y pegarlos dentro de otro

                    ⦿  User.update = async (user, result) => {
                            let fields = [];
                            let values = [];
                    
                            if (user.password) {
                                const hash = await bcrypt.hash(user.password, 10);
                                fields.push("password = ?");
                                values.push(hash);
                            }
                    
                            if (user.email) {
                                fields.push("email = ?");
                                values.push(user.email);
                            }
                            if (user.name) {
                                fields.push("name = ?");
                                values.push(user.name);
                            }
                            if (user.lastname) {
                                fields.push("lastname = ?");
                                values.push(user.lastname);
                            }
                            if (user.phone) {
                                fields.push("phone = ?");
                                values.push(user.phone);
                            }
                            if (user.image) {
                                fields.push("image = ?");
                                values.push(user.image);
                            }
                            if (user.role) {
                                fields.push("role = ?");
                                values.push(user.role);
                            }
                
                            fields.push("updated_at = ?");
                            values.push(new Date());
                    
                            const sql = `UPDATE users SET ${fields.join(", ")} WHERE id = ?`;
                            values.push(user.id);
                    
                            db.query(sql, values, (err, res) => {
                                if (err) {
                                    console.log('Error al actualizar usuario: ', err);
                                    result(err, null);
                                } else {
                                    console.log('Usuario actualizado: ', { id: user.id, ...user });
                                    result(null, { id: user.id, ...user });
                                }
                            });
                        };
                    
                    84. Aqui creamos una nueva función llamada update "actualizar" declaramos que es asincrona usando async lo que significa que va a tomar un tiempo
                    en completarse, dentro de esta podemos usar await para indicar que debe esperar a que cierta acción que le demos esté valor se complete además esta recibe como parametro user y result.
                    85. Aqui creamos un array vacio llamado fields "Campos"
                    86. Aqui creamos otro array vacio llamado values "Valores"

                    88. Aqui utilizamos un if para validar nuevamente si user.password tiene un valor truthy
                    89. Si es verdad lo que validamos anteriormente creamos una nueva constante llamada hash que indica que debemos esperar que se complete la acción que tiene dentro usando "await", además
                    llamamos la libreria bcrypt y usamos su funcion "hash()" dentro de está le pasamos un parametro llamado user.password y el número de rondas de trabajo
                    o rondas de hash aplicadas para dificultar los ataques y etc.
                    90. Aqui insertamos dentro de fields el valor de "password = ?" usando la función .push()
                    91. Aqui insertamos dentro de values el hash que declaramos antes usando la función .push()
                    94. Aqui utilizamos un if para validar nuevamente si user.email tiene un valor truthy
                    95. Aqui insertamos dentro de fields el valor de "email = ?" usando la función .push()
                    96. Aqui insertamos dentro de values "user.email" usando la función .push()

                    98. Aqui utilizamos un if para validar nuevamente si user.name tiene un valor truthy
                    99. Aqui insertamos dentro de fields el valor de "name = ?" usando la función .push()
                    100. Aqui insertamos dentro de values "user.name" usando la función .push()

                    102. Aqui utilizamos un if para validar nuevamente si user.lastname tiene un valor truthy
                    103. Aqui insertamos dentro de fields el valor de "lastname = ?" usando la función .push()
                    104. Aqui insertamos dentro de values "user.lastname" usando la función .push()

                    106. Aqui utilizamos un if para validar nuevamente si user.phone tiene un valor truthy
                    107. Aqui insertamos dentro de fields el valor de "phone = ?" usando la función .push()
                    108. Aqui insertamos dentro de values "user.phone" usando la función .push()

                    110. Aqui utilizamos un if para validar nuevamente si user.image tiene un valor truthy
                    111. Aqui insertamos dentro de fields el valor de "image = ?" usando la función .push()
                    112. Aqui insertamos dentro de values "user.image" usando la función .push()

                    114. Aqui utilizamos un if para validar nuevamente si user.role tiene un valor truthy
                    115. Aqui insertamos dentro de fields el valor de "role = ?" usando la función .push()
                    116. Aqui insertamos dentro de values "user.role" usando la función .push()

                    119. Aqui insertamos dentro de fields ("updated_at = ?") usando la función .push()
                    120. Aqui insertamos dentro de values "new Date()" que sería la fecha actual osea algo así "2025-10-22T18:08:05.145Z" usando la función .push()

                    122. Aqui creamos una nueva constante llamada sql que dentro almacena una petición a la base de datos la cúal actualiza los datos de la tabla users usando
                    "UPDATE" y el nombre de la tabla, también usamos set para decirle que columnas queremos actualizar de esa tabla, estas columnas las traemos de fields usando la función join que lo que hace es juntar todos los nombres de las columnas
                    en una sola linea, por ejemplo que pase
                    de esto: 
                    "const fields = ["name = ?", "email = ?"];" 
                    
                    a esto:
                    "[name = ?, email = ?, age = ?]"

                    Y también usamos el "WHERE id = ?" para decirle a cúal usuario queremos actualizarle esos datos mediante su id además toda está petición solamente se hace si algún dato tiene un valor truthy.
                    123. Aqui insertamos dentro de values el id del usuario usando la función .push()
                    125. Aqui usamos la constante db que sería nuestra conexión a la base de datos y además usamos la función query() la cúal tiene los parametros sql que sería la petición, values que sería el array que hemos creado al inicio
                    y tambien una arrow function anonima.
                    126, 127. Aqui validamos si el err se cumple y si es asi devolvemos un mensaje en la consola que diga "Error al actualizar usuario" y el error que ocurrio
                    128. Aqui almacenamos el error dentro de result y un valor null
                    129. Aqui decimos que si error no tiene un valor truthy entonces enviaremos un mensaje en la consola que diga "Usuario actualizado" y devolvemos el id y toda la información que actualizamos.
                    
                    


                    ⦿  User.delete = (id, result) => {
                            const sql = `DELETE FROM users WHERE id = ?`;
                            db.query(sql, f, (err, res) => {
                                if (err) {
                                    console.log('Error al eliminar usuario: ', err);
                                    result(err, null);
                                } else {
                                    console.log('Usuario eliminado con id: ', id);
                                    result(null, res);
                                }
                            });
                        };
                
                        module.exports = User;

                    136. Aqui creamos una nueva arrow function con el nombre de delete "eliminar" que recibe como parametro id y result
                    137. Aqui creamos una nueva constante llamada sql que almacena una petición a la base de datos la cúal dice "DELETE FROM users WHERE id = ?"
                    usamos DELETE para indicar la acción osea eliminar, despúes le agregamos un FROM para indicarle en que tabla o donde debe eliminar nosotros le pasamos la tabla users
                    quedando "FROM users" despúes decimos WHERE id = ? que sirve para indicarle el id del usuario al que debe eliminar.
                    138. Aqui llamamos la constante db que seria nuestra conexion a la base de datos y ademas usamos una funcion llamada query la que cual recibe como paremetros la petición,
                    un array llamado id y una arrow function anonima.
                    139, 140. Dentro de la función anonima aqui dentro validamos si error contiene un valor truthy, si es asi enviamos un mensaje a la consola que dice "Error al elimnar usuario" y el error
                    141. Aqui almacenamos el error y un valor null dentro de result.
                    142, 143. Aqui decimos que si err no es truthy entonces enviamos un mensjae en la consola que dice "Usuario eliminado con id" y el id del usuario eliminado
                    144. Aqui almacenamos null y el response o res dentro de result.

                    149. Aqui establecemos que este archivo a exportar el objeto User para poder ser importado y utilizado donde sea.


                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.04.  Codificar la key en 'backend/config/keys.js': ---------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Ingrese a la siguiente página: https://www.vondy.com/random-key-generator--ZzGGMYgS?lc=5 (o en alguna página que genere códigos de 256
                bit de forma aleatoria) para generar una clave de 256 bits; cópiela y péguela en el archivo 'backend/config/keys.js', quedando de la 
                siguiente forma:

                      1     require('dotenv').config();
                      2
                      3     module.exports = {
                      4         secretOrKey: process.env.JWT_SECRET
                      5     };

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  Este modulo sirve para exportar la firma secreta del jsonwebtoken y que no sea necesario utilizar process.env en todas partes si no solo
                    una variable.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    1. Aqui importamos la libreria dotenv y usamos una función config de esa misma libreria.
                    3. Y aqui exportamos un objeto que contiene una llave llamada secretOrKey
                    4. esta llave lo que hace es traer y almacenar una variable de entorno llamada
                    JWT_SECRET usando process.env.JWT_SECRET.
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘
                    
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.05.  Codificar el Jason Web Token con la key en 'backend/config/passport.js': ------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     const JwtStrategy = require('passport-jwt').Strategy;
                      2     const ExtractJwt = require('passport-jwt').ExtractJwt;
                      3     const passport = require('passport');
                      4     const Keys = require('./keys');
                      5     const User = require('../models/user');
                      6
                      7     const opts = {
                      8         jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
                      9         secretOrKey: Keys.secretOrKey
                     10     };
                     11
                     12     passport.use(new JwtStrategy(opts, (jwt_payload, done) => {
                     13         User.findById(jwt_payload.id, (err, user) => {
                     14             if (err) {
                     15                 return done(err, false);
                     16             }
                     17             if (user) {
                     18                 return done(null, user);
                     19             }
                     20             else{
                     21                 return done(null, false);
                     22             }
                     23         });
                     24     }));
                     25
                     26     module.exports = passport;

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    1. Importamos la libreria passport-jwt y la almacenamos en una constante llamada JwtStrategy y además usamos la funcion Strategy de esta misma libreria.
                    2. Importamos la libreria passport-jwt y la almacenamos en una constante llamada ExtractJwt y además usamos la función ExtractJwt de esta misma libreria.
                    3. Importamos la libreria passport y la almacenamos en una constante llamada passport.
                    4. Importamos el modulo de Keys y la almacenamos en la constante Keys.
                    5. Importamos el archivo user dentro de models el cúal exporta un objeto User que seria lo que almacenamos aqui en la variable User.
                    7. Creamos una nueva constante llamada opts que almacena un objeto el cúal dentro almacena dos claves que son jwtFromRequest, secretOrKey.
                    8. Aqui tenemos una llave llamada jwtFromRequest que dentro guarda o llama la constante ExtractJwt y además usamos una funcion de la libreria que almacena jwtFromRequest
                    que es .fromAuthHeaderAsBearerToken() que lo que hace es
                    9. Aqui tenemos otra llave llamada secretOrKey que almacena la constante Keys y esta constante Keys almacena el archivo keys del cual usamos el secretOrKey que el archivo keys exporta.
                    12. Llamamos la variable passport y usa una función que esta trae llamada "use()" que recibe como parametro un nuevo o crea un nuevo JwtStrategy que es otorgado por la función Strategy
                    que importa de la libreria "passport-jwt", a esta funcion le pasamos unos parametros como el objeto opts y una funcion anonima que tiene dos parametros
                    que son jwt_payload y done
                    13. Aqui llamamos la constante User y usamos una función de esta llamada findById "Buscar por Id" a esta funcion le pasamos dos parametros que son 
                    jwt_payload.id y una funcion anonima que tiene como parametros err y user
                    14, 15. Aqui validamos si err tiene una valor truthy y si se cumple esa condición retornamos el parametro "done" pero dentro de este almacenamos el error y un valor
                    falso
                    17, 18. Aqui validamos si user tiene un valor truthy y si esto se cumple retornamos el parametro "done" y dentro de este almacenamos un valor null, y el parametro user
                    20, 21. Aqui validamos que si no se cumple ninguna de las dos condiciones anteriores, entonces si no se cumplen retornamos "done" y dentro almacenamos un valor null , un valor falso
                    26. Aqui exportamos nuestra constante passport.
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.06.  Codificar la API de usuarios en 'backend/controllers/userController.js': ------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     const User = require('../models/user');
                      2     const bcrypt = require('bcryptjs');
                      3     const jwt = require('jsonwebtoken');
                      4     const keys = require('../config/keys');
                      5
                      6     module.exports = {
                      7         login(req, res) {
                      8             const email = req.body.email;
                      9             const password = req.body.password;
                     10
                     11             User.findByEmail(email, async (err, myUser) => {
                     12                 if (err) {
                     13                     return res.status(501).json({
                     14                         success: false,
                     15                         message: 'Error al consultar el usuario',
                     16                         error: err
                     17                     });
                     18                 }
                     19
                     20                 if (!myUser) {
                     21                     return res.status(401).json({
                     22                         success: false,
                     23                         message: 'El email no existe en la base de datos'
                     24                     });
                     25                 }
                     26
                     27                 const isPasswordValid = await bcrypt.compare(password, myUser.password);
                     28
                     29                 if (isPasswordValid) {
                     30                     const token = jwt.sign(
                     31                         { id: myUser.id, email: myUser.email, role: myUser.role },
                     32                         keys.secretOrKey,
                     33                         { expiresIn: '1h' }
                     34                     );
                     35
                     36                     const data = {
                     37                         id: myUser.id,
                     38                         email: myUser.email,
                     39                         name: myUser.name,
                     40                         lastname: myUser.lastname,
                     41                         image: myUser.image,
                     42                         phone: myUser.phone,
                     43                         role: myUser.role,
                     44                         session_token: `JWT ${token}`
                     45                     };
                     46
                     47                     return res.status(201).json({
                     48                         success: true,
                     49                         message: 'Usuario autenticado',
                     50                         data: data
                     51                     });
                     52                 } else {
                     53                     return res.status(401).json({
                     54                         success: false,
                     55                         message: 'Contraseña o correo incorrecto'
                     56                     });
                     57                 }
                     58             });
                     59         },
                     60
                     61         getAllUsers(req, res) {
                     62             User.findAll((err, users) => {
                     63                 if (err) {
                     64                     return res.status(501).json({
                     65                         success: false,
                     66                         message: 'Error al listar usuarios',
                     67                         error: err
                     68                     });
                     69                 }
                     70                 return res.status(200).json({
                     71                     success: true,
                     72                     message: 'Lista de usuarios',
                     73                     data: users
                     74                 });
                     75             });
                     76         },
                     77
                     78         getUserById(req, res) {
                     79             const id = req.params.id;
                     80             User.findById(id, (err, user) => {
                     81                 if (err) {
                     82                     return res.status(501).json({
                     83                         success: false,
                     84                         message: 'Error al consultar el usuario',
                     85                         error: err
                     86                     });
                     87                 }
                     88                 if (!user) {
                     89                     return res.status(404).json({
                     90                         success: false,
                     91                         message: 'Usuario no encontrado'
                     92                     });
                     93                 }
                     94                 return res.status(200).json({
                     95                     success: true,
                     96                     message: 'Usuario encontrado',
                     97                     data: user
                     98                 });
                     99             });
                    100         },
                    101
                    102         register(req, res) {
                    103             const user = req.body;
                    104
                    105             if (!user.role) {
                    106                 user.role = 'user';
                    107             }
                    108
                    109             User.create(user, (err, data) => {
                    110                 if (err) {
                    111                     return res.status(501).json({
                    112                         success: false,
                    113                         message: 'Error al crear al usuario',
                    114                         error: err
                    115                     });
                    116                 } else {
                    117                     return res.status(201).json({
                    118                         success: true,
                    119                         message: 'Usuario creado correctamente',
                    120                         data: data
                    121                     });
                    122                 }
                    123             });
                    124         },
                    125
                    126         getUserUpdate(req, res) {
                    127             const user = req.body;
                    128             User.update(user, (err, data) => {
                    129                 if (err) {
                    130                     return res.status(501).json({
                    131                         success: false,
                    132                         message: 'Error al actualizar el usuario',
                    133                         error: err
                    134                     });
                    135                 }
                    136                 return res.status(200).json({
                    137                     success: true,
                    138                     message: 'Usuario actualizado',
                    139                     data: data
                    140                 });
                    141             });
                    142         },
                    143
                    144         getUserDelete(req, res) {
                    145             const id = req.params.id;
                    146             User.delete(id, (err, data) => {
                    147                 if (err) {
                    148                     return res.status(501).json({
                    149                         success: false,
                    150                         message: 'Error al eliminar el usuario',
                    151                         error: err
                    152                     });
                    153                 }
                    154                 return res.status(200).json({
                    155                     success: true,
                    156                     message: 'Usuario eliminado',
                    157                     data: data
                    158                 });
                    159             });
                    160         }
                    161     };

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                    1. Importamos el objeto User de el archivo user que esta dentro de los modelos y lo almacenamos en una constante llamada User
                    2. Importamos la libreria bcrypt y la almacenamos en una constante llamada bcrypt
                    3. Importamos la libreria jsonwebtoken y la almacenamos en una constante llamada jwt
                    4. Importamos el objeto keys de el archivo keys que esta dentro de la carpeta config
                    6. Digitamos que este archivo va a exportar todo lo que hay dentro de ese objeto

                    ⦿  login(req, res) {
                            const email = req.body.email;
                            const password = req.body.password;
                
                            User.findByEmail(email, async (err, myUser) => {
                                if (err) {
                                    return res.status(501).json({
                                        success: false,
                                        message: 'Error al consultar el usuario',
                                        error: err
                                    });
                                }
                
                                if (!myUser) {
                                    return res.status(401).json({
                                        success: false,
                                        message: 'El email no existe en la base de datos'
                                    });
                                }
                
                                const isPasswordValid = await bcrypt.compare(password, myUser.password);
                
                                if (isPasswordValid) {
                                    const token = jwt.sign(
                                        { id: myUser.id, email: myUser.email, role: myUser.role },
                                        keys.secretOrKey,
                                        { expiresIn: '1h' }
                                    );
                
                                    const data = {
                                        id: myUser.id,
                                        email: myUser.email,
                                        name: myUser.name,
                                        lastname: myUser.lastname,
                                        image: myUser.image,
                                        phone: myUser.phone,
                                        role: myUser.role,
                                        session_token: `JWT ${token}`
                                    };
                
                                    return res.status(201).json({
                                        success: true,
                                        message: 'Usuario autenticado',
                                        data: data
                                    });
                                } else {
                                    return res.status(401).json({
                                        success: false,
                                        message: 'Contraseña o correo incorrecto'
                                    });
                                }
                            });
                        },

                    7. Dentro del objeto creamos una nueva función llamada login que recibe dos parametros que son req "request" y res "response"
                    8. Aqui creamos una nueva constante llamada email que almacena un valor que esta dentro del parametro req llamado email como una clave
                    dentro de un objeto llamada email
                    9. Aqui creamos una nueva constante llamada password que al igual que email esta dentro del parametro req con una clave llamada password
                    11. Aqui llamamos la constante User y usamos una de sus funciones que es findByEmail "Buscar Por Correo" a la cual le pasamos como parametros
                    la constante email y una funcion anonima que declaramos que es asincrona usando async lo que significa que va a tomar un tiempo 
                    en completarse, también esta funcion anonima tiene unos parametros tales como err y myUser.
                    12, 13. Aqui evaluamos si err tiene un valor truthy, y si es así entonces retornamos un valor al parametro res al cual le agregamos un valor dentro
                    usando .status(501) para indicar si el estado de la funcion fue exitoso o no y tambien le pasamos un objeto dentro de este usando .json() y agregando 
                    el objeto dentro.
                    14.Dentro del objeto que esta dentro del .json({}) le agregamos unas clave llamada "status" indicando que su valor es false para indicar que el estado fue negativo
                    15. Aqui agregamos otra clave llamada "message" que dentro almacena un texto que dice "Error al consultar el usuario"
                    16. Y aqui decimos cúal fue el error que sucedio o porque no se pudo completar la acción.
                    20. Aqui validamos si el usuario no existe usando "!" para indicar que no hay valor en ese parametro
                    21. Entonces aqui retornamos el parametro res pero agregandole un status dentro en este caso 401 que indica que no existe ese dato que estamos pidiendo
                    y le pasamos un objeto usando .json({}).
                    22. Dentro del objeto le pasamos una clave llamada success que indica si fue exitosa la acción o no, en este caso no fue exitosa asi que dentro le damos un valor false.
                    23. También le pasamos otra clave llamada message para indicarle el porque no se realizo la acción.
                    27. Aqui creamos una nueva constante llamada isPasswordValid la cual almacena una acción que tomara un tiempo en resolverse para indicar que tomara un tiempo usamos el
                    await y ahora llamamos la constante o la libreria bcrypt y usamos una funcion de esta llamada .compare() que recibe como parametros la contraseña que le pasamos y tambien un llave del objeto o parametro myUser llamada password.
                    29. Ahora validamos si la constante isPasswordValid y su funcion dentro tienen un valor truthy.
                    30. Aqui creamos una nueva constante llamada token que dentro almacena la libreria o la constante jwt y además usamos una función de esta llamada .sign()
                    31. Dentro de la función sign le pasamos un objeto como parametro el cual dentro contiene una llave id: que llama o almacena un dato traido del objeto myUser como lo es myUser.id
                    , otra llave llamada email que contiene la llave email del objeto myUser, otra llave llamada role que contiene la llave role del objeto myUser.
                    32. Dentro de la función sign tambien le pasamos otro paremetro que seria la llave secretOrKey que esta dentro del objeto keys
                    33. Dentro de la función sign le pasamos un ultimo parametro que sería un objeto que contiene una llave llamada expiresIn "Expira en" y le damos un valor de 1 hora
                    esto sirve para indicar el tiempo que tiene el jsonwebtoken del usuario para expirar.
                    36. Aqui creamos un nuevo objeto llamado data que dentro almacena 8 llaves
                    37. Dentro de data tenemos una llave llamada id que almacena el valor de la llave llamada id que esta dentro del objeto myUser.
                    38. Dentro de data tenemos una llave llamada email que almacena el valor de la llave llamada email que esta dentro del objeto myUser.
                    39. Dentro de data tenemos una llave llamada name que almacena el valor de la llave llamada name que esta dentro del objeto myUser
                    40. Dentro de data tenemos una llave llamada lastname que almacena el valor de la llave llamada id que esta dentro del objeto myUser
                    41. Dentro de data tenemos una llave llamada image que almacena el valor de la llave llamada image que esta dentro del objeto myUser
                    42. Dentro de data tenemos una llave llamada phone que almacena el valor de la llave llamada phone que esta dentro del objeto myUser
                    43. Dentro de data tenemos una llave llamada role que almacena el valor de la llave llamada role que esta dentro del objeto myUser
                    44. Dentro de data tenemos una llave llamada session_token que almacena el resultado o el valor de la constante token que creamos anteriormente.
                    47. Aqui establecemos un return, dentro de este establecemos que al parametro res le agregaremos un estado con un valor 201 que sería exitoso y usamos la funcion .json()
                    a la cúal le pasamos como parametro un objeto
                    48. Dentro de ese objeto pasamos una llave llamada success que indica si fue exitosa la acción en este caso le damos un valor true para complementar que si fue exitosa la acción.
                    49. También le pasamos otra llave llamada message que dentro almacena un texto que dice 'Usuario autenticado'
                    50. También le pasamos otra llave llamada data que almacena dentro el objeto data que creamos antes el cúal nos muestra toda la información del usuario que acaba de loguearse.
                    52. Aqui decimos que si el isPasswordValid no tiene un valor entonces vamos a devolver algo para notificar eso.
                    53. Aqui establecemos que vamos a retornar, entonces retornariamos el parametro res pero asignandole un estado 401 con la funcion .status() que indica que la acción no fue exitosa, y también le agregamos más valores
                    con la funcion .json() la cual dentro almacena un objeto.
                    54.Dentro del objeto que esta dentro del .json({}) le agregamos unas clave llamada "success" indicando que su valor es false para indicar que el estado fue negativo.
                    55. Dentro del objeto que esta dentro del .json({}) le agregamos unas clave llamada "message" que dentro almacena un texto que dice 'Contraseña o correo incorrecto'.
                    
                    ⦿  getAllUsers(req, res) {
                            User.findAll((err, users) => {
                                if (err) {
                                    return res.status(501).json({
                                        success: false,
                                        message: 'Error al listar usuarios',
                                        error: err
                                    });
                                }
                                return res.status(200).json({
                                    success: true,
                                    message: 'Lista de usuarios',
                                    data: users
                                });
                            });
                        },
                    61. Aqui creamos una nueva funcion llamada getAllUsers "obtener todos los usuarios" la cual recibe dos parametros que son req "Request" y res "Response".
                    62. Aqui llamamos el objeto User y usamos un función de este mismo llamada findAll "Buscar Todos" la cual recibe como parametro una función anonima que tiene recibe dos parametros que son err y users.
                    63. Dentro de la funcion tenemos un condicional if el cual valida si el parametro err tiene un valor truthy
                    64. Si ese condicional se cumple entonces en esta línea retornamos el parametro res al que le agregamos un estado 501 el cúal indica que no se pudo lograr la acción, además le agregamos otra función
                    llamada .json() la cual dentro almacena un objeto
                    65. Aqui creamos una llave llamada success que dentro almacena un valor false
                    66. Aqui creamos una llave llamada message que dentro almacena un texto "'Error al listar usuarios'"
                    67. Aqui creamos una llave llamada error que dentro almacena el parametro err
                    70. Aqui vamos a retornar el parametro res pero aplicandole un estado con la funcion .status(), dandole un estado 200 que sería que la acción se realizo exitosamente y ademas tambien le damos mas valore
                    usando la funcion .json() que dentro almacena un objeto
                    71. Dentro del objeto de la función .json() creamos una nueva llave llamada success que dentro almacena un valor true indicando que si fue exitosa la acción
                    72. Dentro del objeto de la función .json() creamos una nueva llave llamada message que dentro almacena un texto "'Lista de usuarios'"
                    73. Dentro del objeto de la función .json() creamos una nueva llave llamada data que dentro almacena el parametro users.
                    
                    ⦿  getUserById(req, res) {
                            const id = req.params.id;
                            User.findById(id, (err, user) => {
                                if (err) {
                                    return res.status(501).json({
                                        success: false,
                                        message: 'Error al consultar el usuario',
                                        error: err
                                    });
                                }
                                if (!user) {
                                    return res.status(404).json({
                                        success: false,
                                        message: 'Usuario no encontrado'
                                    });
                                }
                                return res.status(200).json({
                                    success: true,
                                    message: 'Usuario encontrado',
                                    data: user
                                });
                            });
                        },

                    78. Aqui creamos una nueva función llamada getUserById "obtener usuario por el id" la cúal recibe dos parametros que son req "Request" y res "Response"
                    79. Aqui creamos una nueva constante llamada id que dentro almacena el parametro req
                    80.
                    81.
                    82.
                    83.
                    84.
                    85.
                    88.
                    89.
                    90.
                    91.
                    94.
                    95.
                    96.
                    97.
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.07.  Codificar la autenticación por JWT y Roles en 'backend/middlewares/authMiddleware.js': ----------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     const jwt = require('jsonwebtoken');
                      2     const keys = require('../config/keys');
                      3
                      4     function verifyToken(req, res, next) {
                      5         const authHeader = req.headers['authorization'];
                      6         if (!authHeader) {
                      7             return res.status(403).json({
                      8                 success: false,
                      9                 message: 'No se proporcionó un token'
                     10             });
                     11         }
                     12
                     13         const token = authHeader.split(' ')[1];
                     14         if (!token) {
                     15             return res.status(403).json({
                     16                 success: false,
                     17                 message: 'Formato de token inválido'
                     18             });
                     19         }
                     20
                     21         jwt.verify(token, keys.secretOrKey, (err, decoded) => {
                     22             if (err) {
                     23                 return res.status(401).json({
                     24                     success: false,
                     25                     message: 'Token inválido o expirado',
                     26                     error: err
                     27                 });
                     28             }
                     29             req.user = decoded;
                     30             next();
                     31         });
                     32     }
                     33
                     34     function authorizeRoles(roles) {
                     35         return (req, res, next) => {
                     36             if (!req.user || !roles.includes(req.user.role)) {
                     37                 return res.status(403).json({
                     38                     success: false,
                     39                     message: `Acceso denegado: se requiere rol ${roles.join(' o ')}`
                     40                 });
                     41             }
                     42             next();
                     43         };
                     44     }
                     45
                     46     module.exports = {
                     47         verifyToken,
                     48         authorizeRoles
                     49     };

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                    B.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.08.  Codificar la ruta de usuario en 'backend/routes/userRoutes.js': ---------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     const express = require('express');
                      2     const router = express.Router();
                      3     const userController = require('../controllers/userController');
                      4     const { verifyToken, authorizeRoles } = require('../middlewares/authMiddleware');
                      5
                      6     // Rutas públicas
                      7     router.post('/create', userController.register);
                      8     router.post('/login', userController.login);
                      9
                     10     // Rutas protegidas
                     11     router.get('/', verifyToken, authorizeRoles(['admin', 'seller']), userController.getAllUsers);
                     12     router.get('/:id', verifyToken, authorizeRoles(['admin', 'seller']), userController.getUserById);
                     13     router.put('/:id', verifyToken, authorizeRoles(['admin', 'seller']), userController.getUserUpdate);
                     14     router.delete('/delete/:id', verifyToken, authorizeRoles(['admin']), userController.getUserDelete);
                     15
                     16     module.exports = router;

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                    B.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.09.  Codificar el servidor en 'backend/server.js': ---------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     // server.js
                      2     const express = require('express');
                      3     const logger = require('morgan');
                      4     const cors = require('cors');
                      5     const usersRoutes = require('./routes/userRoutes');
                      6
                      7     const app = express();
                      8
                      9     // Middlewares globales
                     10     app.use(logger('dev'));
                     11     app.use(express.json());
                     12     app.use(express.urlencoded({ extended: true }));
                     13     app.use(cors());
                     14
                     15     // Rutas
                     16     app.use('/api/users', usersRoutes);
                     17
                     18     // Endpoints de prueba
                     19     app.get('/', (req, res) => {
                     20         res.send('Ruta raíz del Backend');
                     21     });
                     22
                     23     app.get('/test', (req, res) => {
                     24         res.send('Ruta TEST');
                     25     });
                     26
                     27     // Manejo de errores
                     28     app.use((err, req, res, next) => {
                     29         console.log(err);
                     30         res.status(err.status || 500).send(err.stack);
                     31     });
                     32
                     33     // Exportamos la app para que la use index.js
                     34     module.exports = app;

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                    B.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.10.  Codificar el inicio del backend en 'backend/index.js': ------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     const http = require('http');
                      2     const app = require('./server');
                      3     
                      4     const port = process.env.PORT || 3000;
                      5     const host = process.env.HOST || 'localhost';
                      6     
                      7     app.set('port', port);
                      8     
                      9     const server = http.createServer(app);
                     10     
                     11     server.listen(port, host, () => {
                     12       console.log(`Servidor corriendo en http://${host}:${port}`);
                     13     });

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    1. .
                    2. .
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.11.  Ejecutar el backend: ----------------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Iniciar el servidor 'backend' desde la terminal de Visual Studio Code.

                    ⦿  PS C:\..\backend> node index.js
            
            02. Debe aparecer en la terminal, texto similar a lo siguiente:
            
                        [dotenv@17.2.3] injecting env (6) from .env -- tip: 🛠️  run anywhere with `dotenvx run -- yourcommand`
                        [dotenv@17.2.3] injecting env (0) from .env -- tip: 🔐 encrypt with Dotenvx: https://dotenvx.com
                        Servidor corriendo en http://localhost:3000
                        Base de datos conectada

                    ⦿  Para detener el servidor, ubíquese en la terminal de Visual Studio Code y presione 'CTRL + C'.



|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||---------------------------------------------------------------- 05. PRUEBAS DE LA API CON POSTMAN -----------------------------------------------------------------|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.01.  Crear la Colección 'USUARIOS': ------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Dar click en 'New / Collection'
            
            02. Dar click en 'New Collection' y escribir 'USUARIOS'

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.02.  Crear los métodos HTTP (GET, POST, PUT, DELETE) de la Colección 'USUARIOS': ---------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Dar click en los tres puntos (...) que están ubicados al lado derecho de 'USUARIOS' (En el Panel Lateral Izquierdo) y seleccionar 'Add request'
            
            02. Dar click en los tres puntos (...) que están ubicados al lado derecho de 'GET New Request' y seleccionar 'Rename', escribir 'raiz'
            
            03. Repetir los pasos 01 y 02 para el método: 'userCreate', 'login', 'usersAll', 'userById', 'userCreate', 'userUpdate' y 'userDelete'

            04. Seleccionar el método 'userCreate' / dar click al control de lista 'GET   ▼' / Seleccionar 'POST' / Presionar 'CTRL + S'
            
            05. Seleccionar el método 'login' / dar click al control de lista 'GET   ▼' / Seleccionar 'POST' / Presionar 'CTRL + S'
            
            06. Seleccionar el método 'userUpdate' / dar click al control de lista 'GET   ▼' / Seleccionar 'PUT' / Presionar 'CTRL + S'
            
            07. Seleccionar el método 'userDelete' / dar click al control de lista 'GET   ▼' / Seleccionar 'DELETE' / Presionar 'CTRL + S'
           
            

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.03.  Configurar 'GET raiz': --------------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Seleccionar el método 'GET raiz'
            
            02. Escribir en el control de texto (al frente de 'GET   ▼' | Enter URL or describe the request to Postbot |) la URL de la API: 'localhost:3000'

            03. Dar click en 'Send'
            
            04. Verificar que la parte inferior aparezca el siguiente código:

                      1   Ruta raíz del Backend

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.04.  Configurar 'POST userCreate': -------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Seleccionar el método 'POST userCreate'
            
            02. Escribir en el control de texto (al frente de 'POST   ▼' | Enter URL or describe the request to Postbot |) la URL de la API 
                (ENDPOINT: /api/users/create): 'localhost:3000/api/users/create'

            03. Dar click en 'Body / raw / JSON'
            
            04. Escribir el siguiente arreglo (clave: valor) en formato JSON:

                      1   {
                      2     "email": "user@sistema.com",
                      3     "name": "Usuario",
                      4     "lastname": "Sistema",
                      5     "phone": "3103103101",
                      6     "image": "yyyy",
                      7     "password": "12345"
                      8   }
            
            05. Dar click en 'Send'
            
            06. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario creado correctamente",
                      4        "data": {
                      5            "id": 1,
                      6            "email": "user@sistema.com",
                      7            "name": "Usuario",
                      8            "lastname": "Sistema",
                      9            "phone": "3103103101",
                     10            "image": "yyyy",
                     11            "password": "12345",
                     12            "role": "user"
                     13        }
                     14    }

            07. Ir a 'http://localhost/phpmyadmin/', para verificar que en la base de datos 'db_node' (tabla 'users'), se haya creado el registro
              
            08. Repetir los pasos 4, 5 y 7 con el siguiente arreglo (clave: valor) en formato JSON:

                      1    {
                      2        "email": "customer@sistema.com",
                      3        "name": "Customer",
                      4        "lastname": "Sistema",
                      5        "phone": "3113113111",
                      6        "image": "yyyy",
                      7        "role": "customer",
                      8        "password": "12345"
                      9    }              
              
            09. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario creado correctamente",
                      4        "data": {
                      5            "id": 2,
                      6            "email": "customer@sistema.com",
                      7            "name": "Customer",
                      8            "lastname": "Sistema",
                      9            "phone": "3113113111",
                     10            "image": "yyyy",
                     11            "role": "customer",
                     12            "password": "12345"
                     13        }
                     14    }

            10. Repetir los pasos 4, 5 y 7 con el siguiente arreglo (clave: valor) en formato JSON:

                      1    {
                      2        "email": "seller@sistema.com",
                      3        "name": "Seller",
                      4        "lastname": "Sistema",
                      5        "phone": "3123123121",
                      6        "image": "yyyy",
                      7        "role": "seller",
                      8        "password": "12345"
                      9    }              
              
            11. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario creado correctamente",
                      4        "data": {
                      5            "id": 3,
                      6            "email": "seller@sistema.com",
                      7            "name": "Seller",
                      8            "lastname": "Sistema",
                      9            "phone": "3123123121",
                     10            "image": "yyyy",
                     11            "role": "seller",
                     12            "password": "12345"
                     13        }
                     14    }
            
            12. Repetir los pasos 4, 5 y 7 con el siguiente arreglo (clave: valor) en formato JSON:

                      1    {
                      2        "email": "admin@sistema.com",
                      3        "name": "Admin",
                      4        "lastname": "Sistema",
                      5        "phone": "3133133131",
                      6        "image": "yyyy",
                      7        "role": "admin",
                      8        "password": "12345"
                      9    }              
              
            13. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario creado correctamente",
                      4        "data": {
                      5            "id": 4,
                      6            "email": "admin@sistema.com",
                      7            "name": "Admin",
                      8            "lastname": "Sistema",
                      9            "phone": "3133133131",
                     10            "image": "yyyy",
                     11            "role": "admin",
                     12            "password": "12345"
                     13        }
                     14    }
            
            14. Repetir los pasos 4, 5 y 7 con el siguiente arreglo (clave: valor) en formato JSON:

                      1    {
                      2        "email": "other@sistema.com",
                      3        "name": "Other",
                      4        "lastname": "Sistema",
                      5        "phone": "3143143141",
                      6        "image": "yyyy",
                      7        "role": "other",
                      8        "password": "12345"
                      9    }              
              
            15. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario creado correctamente",
                      4        "data": {
                      5            "id": 5,
                      6            "email": "other@sistema.com",
                      7            "name": "Other",
                      8            "lastname": "Sistema",
                      9            "phone": "3143143141",
                     10            "image": "yyyy",
                     11            "role": "other",
                     12            "password": "12345"
                     13        }
                     14    }

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  NOTA:   
                    
                    ⦿  Note que 'http://localhost/phpmyadmin/', en la base de datos 'db_node' (tabla 'users'), en el registro creado, en la columna
                        'role', aparece 'user' en lugar de 'other'; esto se debe a que en 'backend/models/user.js' en las líneas 48 y 49, se está 
                        validando que únicamente los roles pueden ser: 'admin', 'seller', 'customer', 'user'; de lo contrario escribe 'user'
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.05.  Configurar 'POST login': ------------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Seleccionar el método 'POST login'
            
            02. Escribir en el control de texto (al frente de 'POST   ▼' | Enter URL or describe the request to Postbot |) la URL de la API 
                (ENDPOINT: /api/users/login): 'localhost:3000/api/users/login'

            03. Dar click en 'Body / raw / JSON'
            
            04. Escribir el siguiente arreglo (clave: valor) en formato JSON:

                      1    {
                      2        "email": "user@sistema.com",
                      3        "password": "12345"
                      4    }
            
            05. Dar click en 'Send'
            
            06. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario autenticado",
                      4        "data": {
                      5            "id": 1,
                      6            "email": "user@gmail.com",
                      7            "name": "Usuario",
                      8            "lastname": "Sistema",
                      9            "image": "yyyy",
                     10            "phone": "3103103101",
                     11            "role": "user",
                     12            "session_token": "JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
                                                     eyJpZCI6MSwiZW1haWwiOiJ1c2VyQGdtYWlsLmNvbSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzU5MzcwNTE4LCJleHAiOjE3NTkzNzQxMTh9.
                                                     2oJDO0HIsol2TKHD4JBzsrRuXFeCv76e7eqJCzKOpEY"
                     13        }
                     14    }

            07. Copiar todo el código que está entre comillas del "session_token" de la línea 12

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.06.  Configurar 'GET usersAll': ----------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Seleccionar el método 'GET usersAll'
            
            02. Escribir en el control de texto (al frente de 'GET   ▼' | Enter URL or describe the request to Postbot |) la URL de la API 
                (ENDPOINT: /api/users): 'localhost:3000/api/users'

            03. Dar click en 'Send'
            
            04. En la parte inferior debe aparecer el siguiente código:

                      1    {
                      2        "success": false,
                      3        "message": "No se proporcionó un token"
                      4    }

            05. Dar click en 'Headers', en 'Key' escribir 'Authorization' y en 'Value' pegar el 'JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...' 

            06. Dar click en 'Send'

            07. En la parte inferior debe aparecer el siguiente código:

                      1    {
                      2        "success": false,
                      3        "message": "Acceso denegado: se requiere rol admin o seller"
                      4    }
            
            08. Repetir los pasos 4, 5, 6 y 7 del apartado: '05.05.  Configurar 'POST login'' para loguearse como 'customer':

                      1    {
                      2        "email": "customer@sistema.com",
                      3        "password": "12345"
                      4    }
            
            09. Repetir los pasos 5 y 6 de este mismo apartado. En la parte inferior debe aparecer el siguiente còdigo:

                      1    {
                      2        "success": false,
                      3        "message": "Acceso denegado: se requiere rol admin o seller"
                      4    }

            10. Repetir los pasos 4, 5, 6 y 7 del apartado: '05.05.  Configurar 'POST login'' para loguearse como 'seller':

                      1    {
                      2        "email": "seller@sistema.com",
                      3        "password": "12345"
                      4    }
            
            11. Repetir los pasos 5 y 6 de este mismo apartado. En la parte inferior debe aparecer el siguiente còdigo:

                      1    {
                      2        "success": true,
                      3        "message": "Lista de usuarios",
                      4        "data": [
                      5            {
                      6                "id": 1,
                      7                "email": "user@sistema.com",
                      8                "name": "User",
                      9                "lastname": "Sistema",
                     10                "phone": "3103103101",
                     11                "image": "yyyy",
                     12                "role": "user",
                     13                "created_at": "2025-10-02T09:15:59.000Z",
                     14                "updated_at": "2025-10-02T09:15:59.000Z"
                     15            },
                     16            {
                     17                "id": 2,
                     18                "email": "customer@sistema.com",
                     19                "name": "Customer",
                     20                "lastname": "Sistema",
                     21                "phone": "3113113111",
                     22                "image": "yyyy",
                     23                "role": "customer",
                     24                "created_at": "2025-10-02T09:17:09.000Z",
                     25                "updated_at": "2025-10-02T09:17:09.000Z"
                     26            },
                     27            {
                     28                "id": 3,
                     29                "email": "seller@sistema.com",
                     30                "name": "Seller",
                     31                "lastname": "Sistema",
                     32                "phone": "3113113111",
                     33                "image": "yyyy",
                     34                "role": "seller",
                     35                "created_at": "2025-10-02T09:26:11.000Z",
                     36                "updated_at": "2025-10-02T09:26:11.000Z"
                     37            },
                     38            {
                     39                "id": 4,
                     40                "email": "admin@sistema.com",
                     41                "name": "Admin",
                     42                "lastname": "Sistema",
                     43                "phone": "3133133131",
                     44                "image": "yyyy",
                     45                "role": "admin",
                     46                "created_at": "2025-10-02T09:27:19.000Z",
                     47                "updated_at": "2025-10-02T09:27:19.000Z"
                     48            },
                     49            {
                     50                "id": 5,
                     51                "email": "other@sistema.com",
                     52                "name": "Other",
                     53                "lastname": "Sistema",
                     54                "phone": "3143143141",
                     55                "image": "yyyy",
                     56                "role": "user",
                     57                "created_at": "2025-10-02T09:29:16.000Z",
                     58                "updated_at": "2025-10-02T09:29:16.000Z"
                     59            }
                     60        ]
                     61    }

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  NOTA:   
                    
                    ⦿  Como puede notar, el 'seller' puede obtener todos los usuarios del sistema 'GET usersAll'. esto se debe a que en
                        'backend/routes/userRoutes.js' en la línea 11, se está validando que únicamente los roles autorizados para esta acción sean:
                        'admin' o 'seller'
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.07.  Configurar 'GET userById': ----------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Seleccionar el método 'GET userById'
            
            02. Escribir en el control de texto (al frente de 'GET   ▼' | Enter URL or describe the request to Postbot |) la URL de la API 
                (ENDPOINT: /api/users/:id): 'localhost:3000/api/users/2'

            03. Copiar todo el código que está entre comillas del "session_token" de la línea 12, de 'POST login'
            
            04. Dar click en 'Headers', en 'Key' escribir 'Authorization' y en 'Value' pegar el 'JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...' 

            05. Dar click en 'Send'
            
            06. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario encontrado",
                      4        "data": {
                      5            "id": 2,
                      6            "email": "customer@sistema.com",
                      7            "name": "Customer",
                      8            "lastname": "Sistema",
                      9            "image": "yyyy",
                     10            "phone": "3113113111",
                     11            "role": "customer",
                     12            "password": "$2b$10$lW6ZqX.R8wlHkyYUFQmx8.ElOhbnyfm4HOVf3P6MUB3LCknjUFG8m"
                     13        }
                     14    }


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.08.  Configurar 'POST userUpdate': -------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Seleccionar el método 'POST userUpdates'
            
            02. Escribir en el control de texto (al frente de 'GET   ▼' | Enter URL or describe the request to Postbot |) la URL de la API 
                (ENDPOINT: /api/users/update): 'localhost:3000/api/users/update'

            03. Copiar todo el código que está entre comillas del "session_token" de la línea 12, de 'POST login'
            
            04. Dar click en 'Headers', en 'Key' escribir 'Authorization' y en 'Value' pegar el 'JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...' 

            05. Dar click en 'Body / raw / JSON'

            06. Escribir el siguiente arreglo (clave: valor) en formato JSON:

                      1    {
                      2      "id": "2",
                      3      "email": "customer_modified@modificado.com",
                      4      "name": "Customer",
                      5      "lastname": "Modified",
                      6      "phone": "3163163161",
                      7      "image": "yyyy",
                      8      "password": "12345"
                      9    }
            
            07. Dar click en 'Send'
            
            08. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario actualizado",
                      4        "data": {
                      5            "id": "2",
                      6            "email": "customer_modified@modificado.com",
                      7            "name": "Customer",
                      8            "lastname": "Modified",
                      9            "phone": "3163163161",
                     10            "image": "yyyy",
                     11            "password": "12345"
                     12        }
                     13    }

            09. Ir a 'http://localhost/phpmyadmin/', para verificar que en la base de datos 'db_node' (tabla 'users'), se haya actualizado el registro

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.09.  Configurar 'DELETE userDelete': -----------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
            
            01. Seleccionar el método 'DELETE userDelete'
            
            02. Escribir en el control de texto (al frente de 'GET   ▼' | Enter URL or describe the request to Postbot |) la URL de la API 
                (ENDPOINT: /api/users/delete/:id): 'localhost:3000/api/users/delete/5'

            03. Copiar todo el código que está entre comillas del "session_token" de la línea 12, de 'POST login'
            
            04. Dar click en 'Headers', en 'Key' escribir 'Authorization' y en 'Value' pegar el 'JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...' 

            05. Dar click en 'Send'
            
            07. En la parte inferior aparece el siguiente código:

                      1    {
                      2        "success": false,
                      3        "message": "Acceso denegado: se requiere rol admin"
                      4    }

            07. Repetir los pasos 4, 5, 6 y 7 del apartado: '05.05.  Configurar 'POST login'' para loguearse como 'admin':

                      1    {
                      2        "email": "admin@sistema.com",
                      3        "password": "12345"
                      4    }
            
            08. Repetir los pasos 3, 4 y 5 de este mismo apartado. En la parte inferior debe aparecer el siguiente còdigo:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario eliminado",
                      4        "data": {
                      5            "fieldCount": 0,
                      6            "affectedRows": 1,
                      7            "insertId": 0,
                      8            "serverStatus": 2,
                      9            "warningCount": 0,
                     10            "message": "",
                     11            "protocol41": true,
                     12            "changedRows": 0
                     13        }
                     14    }


            09. Ir a 'http://localhost/phpmyadmin/', para verificar que en la base de datos 'db_node' (tabla 'users'), se haya eliminado el registro


|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||------------------------------------------------------------------------------ ANEXOS ------------------------------------------------------------------------------|||
||| ------------------------------------------------------------------------- TENER EN CUENTA -------------------------------------------------------------------------|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- AX_01.  Subir el proyecto a un repositorio 'Github': ----------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            Para evitar confusiones y seguir los pasos correctamente, la carpeta raíz del proyecto se llamará 'proyecto'.
            
            01. Verificar que no haya una cuenta de 'Github' asociada al computador, para ello, debe abrir el 'Panel de Control', dar click en 'Cuentas 
                de usuario / Administrar credenciales de Windows'. Si hay una cuenta asociada 'git:https://github.com', dar click sobre la cuenta y click
                sobre la opción 'Quitar'. 
            
                    ⦿  De no funcionar este método porque no tiene acceso al Panel de control, pruebe abriendo el 'Windows PowerShell' y digite el 
                         siguiente comando:

                         PS C:\..\..> echo "protocol=https`nhost=github.com`n" | git credential-manager erase
            
            02. Abrir su cuenta de 'Github' y en la parte superior derecha, dar click al 'Nombre de su cuenta / Your Repositories'. Dar click en 'New'.
                En el control de texto 'Repository name', escribir el nombre de la carpeta raíz de su proyecto (ejemplo, 'proyecto'. La carpeta raíz no debe 
                tener espacios, ni caracteres compuesto, ni caracteres especiales) y dar click en 'Create Repository'.

                    ⦿  Si no tiene cuenta en 'GitHub', debe crear una.
            
            03. Click derecho sobre la carpeta raíz (ejemplo, 'proyecto') y seleccionar la opción 'Open Git Bash here'; si no se 
                encuentra la opción, hay que instalar 'Git'.
            
            04. En el 'Git Bash' escribir lo siguiente:

                    $ git config --global user.name "nombre de su cuenta"
                    $ git config --global user.email "correo de su cuenta"

                    $ git init
                    $ git branch -M main
                    $ git remote add origin https://github.com/SenaProfeAlbeiro/proyecto.git
                    $ git add .
                    $ git commit -m "Subiendo Proyecto"
                    $ git push -u origin main

            05. Va a aparecer una ventana denominada 'Connect to Github', dar click en la opción 'Sign in with your browser', dar click en 'Authentication 
                Succeeded'. Verificar que se haya abierto en el navegador en donde tiene la cuenta activa, de lo contrario hay que escribir nuevamente las
                credenciales de 'Github'. En el 'Git Bash' debe aparecer texto similar al siguiente:

                    Enumerating objects: 3, done.
                    Counting objects: 100% (3/3), done.
                    Writing objects: 100% (3/3), 226 bytes | 226.00 KiB/s, done.
                    Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
                    To https://github.com/SenaProfeAlbeiro/proyecto.git
                    * [new branch]      main -> main
                    branch 'main' set up to track 'origin/main'.
            
            06. Actualizar la ventana del navegador donde se encuentra abierta su cuenta de 'Github'
            
            07. Para actualizar la información del proyecto en 'Github', en el 'Git bash' escribir los siguientes comandos:

                    $ git add .
                    $ git commit -m "Comentario del cambio"
                    $ git push

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- AX_02.  Clonar un proyecto 'Github': --------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Abrir su cuenta de 'Github' y en la parte superior derecha, dar click al 'Nombre de su cuenta / Your Repositories'. 

            02. Dar click al proyecto que desea clonar, en el caso del ejemplo es 'proyecto'.

            03. Dar click en la opción '<> Code / Copy url to clipboard'.

            04. Ir a una carpeta de Windows, por ejemplo, en el 'C:\xampp\htdocs' (en el caso del ejemplo, 'proyecto').

            05. Click derecho sobre el área de trabajo y seleccionar la opción 'Open Git Bash here'; si no se encuentra la opción, hay que instalar 
                'Git'.
 
            06. En el 'Git Bash' pegar el repositorio clonado de 'Github' con 'CTRL + INSERT', quedando como sigue:

                         $ git clone https://github.com/SenaProfeAlbeiro/proyecto.git

                    ⦿  Si el proyecto ya se encuentra en el computador, puede utilizar el siguiente comando para actualizar la información:
                    
                         $ git pull
            
            07. Abrir el proyecto en Visual Studio Code.


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- AX_03.  Cambiar los puertos de 'Apache' en 'XAMPP': -----------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
                         
            01. En el Panel de control de XAMPP y en la misma línea del servicio 'Apache' dar click en 'Config / Apache (httpd.conf)'.
            
            02. Se abrirá un 'Bloc de Notas'. Dar click en la opción 'Edición / Buscar...' (o presionar las teclas 'CTRL + B').
            
            03. En la ventana emergente y en el control de texto 'Buscar: ', escribir '80' y dar click en 'Buscar siguiente'.
            
            04. Reemplazar todos los valores donde se encentre el puerto '80' con el puerto nuevo de trabajo, por ejemplo, '8080'. Dar click en 
                'cancelar' y guardar los cambios en el archivo.

            05. En el Panel de control de XAMPP dar click en 'start' de 'Apache' para iniciar el servicio.
            
            06. Comprobar que quedó de la forma correcta a través del navegador, con el siguiente enlace:

                         http://localhost:8080/proyecto/
            

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- AX_04.  Cambiar los puertos de 'MySQL' en 'XAMPP': ------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. En el Panel de control de XAMPP y en la misma línea del servicio 'MySQL' dar click en 'Config / my.ini'.

            02. Se abrirá un 'Bloc de Notas'. Dar click en la opción 'Edición / Buscar...' (o presionar las teclas 'CTRL + B').
            
            03. En la ventana emergente y en el control de texto 'Buscar: ', escribir '3306' y dar click en 'Buscar siguiente'.

            04. Reemplazar todos los valores donde se encentre el puerto '3306' con el puerto nuevo de trabajo, por ejemplo, '3308'. Dar click en 
                'cancelar' y guardar los cambios en el archivo.

            05. En el Panel de control de XAMPP y en la misma línea del servicio 'Apache' dar click en 'Config / Apache (php.ini)'.

            06. Se abrirá un 'Bloc de Notas'. Dar click en la opción 'Edición / Buscar...' (o presionar las teclas 'CTRL + B').

            07. En la ventana emergente y en el control de texto 'Buscar: ', escribir '3306' y dar click en 'Buscar siguiente'.

            08. Reemplazar todos los valores donde se encentre el puerto '3306' con el puerto nuevo de trabajo, por ejemplo, '3308'. Dar click en 
                'cancelar' y guardar los cambios en el archivo.
        
            09. En el Panel de control de XAMPP y en la misma línea del servicio 'Apache' dar click en 'Config / phpMyAdmin (config.inc.php)'.

            10. Buscar la línea '$cfg['Servers'][$i]['host'] = '127.0.0.1;' y agregar el puerto nuevo '3308' de la siguiente forma:
                         
                         $cfg['Servers'][$i]['host'] = '127.0.0.1:3308';

            11. En el Panel de control de XAMPP dar click en 'start' de 'MySQL' para iniciar el servicio.

            12. Comprobar que quedó de la forma correcta a través del navegador, con el siguiente enlace:

                         http://localhost:8080/phpmyadmin/            


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- AX_05.  Puesta en marcha del proyecto: ------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Garantizar el ambiente de desarrollo (Ver apartado 01. ENTORNO DE DESARROLLO).
            
            02. Clonar el proyecto desde github en 'C:\xampp\htdocs' (Ver apartado AX_02. Clonar un proyecto 'Github').
            
            03. Abrir el proyecto en Visual Studio Code.
            
            04. Abrir 'XAMPP' y ejecutar los servicios de 'Apache' y 'MySQL'.

            05. Abrir un navegador (preferiblemente Google Chrome) a través de los siguientes enlaces:
            
                    http://localhost/proyecto/

                    http://localhost/phpmyadmin/            
            
                    ⦿  Si el puerto de 'Apache' en 'XAMPP' es diferente al '80' y si es posible, cambiar el puerto al '80' (Ver apartado AX_03. 
                         Cambiar los puertos de 'Apache' en 'XAMPP'); si no es posible, agregar el puerto al 'localhost', por ejemplo, si el puerto 
                         es '8080' entonces debería quedar así:

                         http://localhost:8080/proyecto/

                         http://localhost:8080/phpmyadmin/            
            
                    ⦿  Si el puerto de 'MySQL' en 'XAMPP' es diferente al '3306' y si es posible, cambiar el puerto al '3306' (Ver apartado AX_04. 
                         Cambiar los puertos de 'MySQL' en 'XAMPP').
                                    
            06. Subir la base de datos (Ver el apartado 03. BASE DE DATOS).

            07. Comprobar que se ejecute correctamente la aplicación.